/*
 * Copyright 2021 the original author or authors.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * https://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openrewrite.java.dependencies;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
import org.openrewrite.ExecutionContext;
import org.openrewrite.Recipe;
import org.openrewrite.SourceFile;
import org.openrewrite.gradle.marker.GradleDependencyConfiguration;
import org.openrewrite.gradle.marker.GradleProject;
import org.openrewrite.groovy.GroovyIsoVisitor;
import org.openrewrite.groovy.GroovyVisitor;
import org.openrewrite.groovy.tree.G;
import org.openrewrite.internal.ListUtils;
import org.openrewrite.java.dependencies.table.VulnerabilityReport;
import org.openrewrite.marker.SearchResult;
import org.openrewrite.maven.MavenIsoVisitor;
import org.openrewrite.maven.MavenVisitor;
import org.openrewrite.maven.tree.GroupArtifact;
import org.openrewrite.maven.tree.ResolvedDependency;
import org.openrewrite.maven.tree.ResolvedGroupArtifactVersion;
import org.openrewrite.maven.tree.Scope;
import org.openrewrite.xml.tree.Xml;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

import static java.util.Objects.requireNonNull;

public class DependencyVulnerabilityCheck extends Recipe {
    transient VulnerabilityReport report = new VulnerabilityReport(this);

    @Override
    public String getDisplayName() {
        return "Check for dependency vulnerabilities";
    }

    @Override
    public String getDescription() {
        return "This is a software composition analysis (SCA) tool detects publicly " +
               "disclosed vulnerabilities contained within a projectâ€™s dependencies. It does this by determining " +
               "If found, it will generate a report linking to the associated CVE entries.";
    }

    @Override
    protected List<SourceFile> visit(List<SourceFile> before, ExecutionContext ctx) {
        Map<GroupArtifact, List<Vulnerability>> db = new HashMap<>();
        Map<ResolvedGroupArtifactVersion, Set<Vulnerability>> vulnerabilities = new HashMap<>();

        CsvMapper csvMapper = new CsvMapper();

        try {
            CsvSchema schema = CsvSchema.builder()
                    .addColumn("cve")
                    .addColumn("published")
                    .addColumn("summary")
                    .addColumn("groupArtifact")
                    .addColumn("introducedVersion")
                    .addColumn("fixedVersion")
                    .addColumn("severity")
                    .build();

            MappingIterator<Map<String, String>> vs = csvMapper
                    .readerForMapOf(String.class)
                    .with(schema)
                    .readValues(DependencyVulnerabilityCheck.class.getResourceAsStream("/advisories.csv"));

            ObjectMapper mapper = new ObjectMapper()
                    .registerModule(new JavaTimeModule())
                    .registerModule(new ParameterNamesModule());

            while (vs.hasNextValue()) {
                Vulnerability v = mapper.convertValue(vs.nextValue(), Vulnerability.class);
                String[] ga = v.getGroupArtifact().split(":");
                db.computeIfAbsent(new GroupArtifact(ga[0], ga[1]), g -> new ArrayList<>()).add(v);
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        return ListUtils.map(before, sourceFile -> {
            scanMaven(db, vulnerabilities).visitNonNull(sourceFile, ctx);
            scanGradleGroovy(db, vulnerabilities).visitNonNull(sourceFile, ctx);

            SourceFile s = sourceFile;
            s = (SourceFile) reportMaven(vulnerabilities).visitNonNull(s, ctx);
            s = (SourceFile) reportGradleGroovy(vulnerabilities).visitNonNull(s, ctx);

            return s;
        });
    }

    private MavenVisitor<ExecutionContext> scanMaven(Map<GroupArtifact, List<Vulnerability>> db,
                                                     Map<ResolvedGroupArtifactVersion, Set<Vulnerability>> vulnerabilities) {
        return new MavenIsoVisitor<ExecutionContext>() {
            @Override
            public Xml.Document visitDocument(Xml.Document document, ExecutionContext ctx) {
                for (Map.Entry<Scope, List<ResolvedDependency>> scopeDependencies : getResolutionResult().getDependencies().entrySet()) {
                    for (ResolvedDependency resolvedDependency : scopeDependencies.getValue()) {
                        analyzeDependency(db, vulnerabilities, resolvedDependency);
                    }
                }
                return super.visitDocument(document, ctx);
            }
        };
    }

    private GroovyVisitor<ExecutionContext> scanGradleGroovy(Map<GroupArtifact, List<Vulnerability>> db,
                                                             Map<ResolvedGroupArtifactVersion, Set<Vulnerability>> vulnerabilities) {
        return new GroovyIsoVisitor<ExecutionContext>() {
            @Override
            public G.CompilationUnit visitCompilationUnit(G.CompilationUnit cu, ExecutionContext ctx) {
                cu.getMarkers().findFirst(GradleProject.class).ifPresent(gradleProject -> {
                    for (GradleDependencyConfiguration configuration : gradleProject.getConfigurations()) {
                        for (ResolvedDependency resolvedDependency : configuration.getResolved()) {
                            analyzeDependency(db, vulnerabilities, resolvedDependency);
                        }
                    }
                });
                return super.visitCompilationUnit(cu, ctx);
            }
        };
    }

    private void analyzeDependency(Map<GroupArtifact, List<Vulnerability>> db,
                                   Map<ResolvedGroupArtifactVersion, Set<Vulnerability>> vulnerabilities,
                                   ResolvedDependency resolvedDependency) {
        List<Vulnerability> vs = db.get(new GroupArtifact(resolvedDependency.getGroupId(), resolvedDependency.getArtifactId()));
        if (vs != null) {
            vulnerabilities.computeIfAbsent(resolvedDependency.getGav(), ga -> new TreeSet<>(
                    Comparator.comparing(Vulnerability::getSeverity).reversed()
                            .thenComparing(Vulnerability::getCve))).addAll(vs);
        }
    }

    private MavenVisitor<ExecutionContext> reportMaven(Map<ResolvedGroupArtifactVersion, Set<Vulnerability>> vulnerabilities) {
        return new MavenIsoVisitor<ExecutionContext>() {
            @Override
            public Xml.Tag visitTag(Xml.Tag tag, ExecutionContext ctx) {
                if (isDependencyTag()) {
                    ResolvedDependency resolved = findDependency(tag, null);
                    if (resolved != null) {
                        for (Map.Entry<ResolvedGroupArtifactVersion, Set<Vulnerability>> vulnerabilitiesByGav : vulnerabilities.entrySet()) {
                            ResolvedGroupArtifactVersion gav = vulnerabilitiesByGav.getKey();
                            ResolvedDependency match = resolved.findDependency(requireNonNull(gav.getGroupId()), gav.getArtifactId());
                            if (match != null) {
                                boolean vulnerable = false;
                                for (Vulnerability vulnerability : vulnerabilitiesByGav.getValue()) {
                                    report.insertRow(ctx, new VulnerabilityReport.Row(
                                            vulnerability.getCve(),
                                            gav.getGroupId(),
                                            gav.getArtifactId(),
                                            gav.getVersion(),
                                            vulnerability.getFixedVersion(),
                                            vulnerability.getSummary(),
                                            vulnerability.getSeverity().toString()
                                    ));
                                    vulnerable = true;
                                }
                                if (vulnerable) {
                                    return SearchResult.found(tag, "This dependency includes " + gav + " which has the following vulnerabilities:\n" +
                                                                   vulnerabilitiesByGav.getValue().stream()
                                                                           .map(v -> v.getCve() + " (" + v.getSeverity() + ") - " + v.getSummary())
                                                                           .collect(Collectors.joining("\n")));
                                }
                            }
                        }
                    }
                }
                return super.visitTag(tag, ctx);
            }
        };
    }

    private GroovyVisitor<ExecutionContext> reportGradleGroovy(Map<ResolvedGroupArtifactVersion, Set<Vulnerability>> vulnerabilities) {
        // TODO implement me!
        return new GroovyIsoVisitor<ExecutionContext>() {
            @Override
            public G.CompilationUnit visitCompilationUnit(G.CompilationUnit cu, ExecutionContext ctx) {
                return super.visitCompilationUnit(cu, ctx);
            }
        };
    }
}
