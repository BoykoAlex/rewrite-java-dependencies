/*
 * Copyright 2021 the original author or authors.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * https://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openrewrite.java.dependencies;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
import lombok.EqualsAndHashCode;
import lombok.Value;
import lombok.experimental.NonFinal;
import org.openrewrite.*;
import org.openrewrite.gradle.marker.GradleDependencyConfiguration;
import org.openrewrite.gradle.marker.GradleProject;
import org.openrewrite.groovy.GroovyIsoVisitor;
import org.openrewrite.groovy.GroovyVisitor;
import org.openrewrite.groovy.tree.G;
import org.openrewrite.internal.ListUtils;
import org.openrewrite.internal.StringUtils;
import org.openrewrite.internal.lang.Nullable;
import org.openrewrite.java.dependencies.internal.StaticVersionComparator;
import org.openrewrite.java.dependencies.internal.Version;
import org.openrewrite.java.dependencies.internal.VersionParser;
import org.openrewrite.java.dependencies.table.VulnerabilityReport;
import org.openrewrite.marker.SearchResult;
import org.openrewrite.maven.MavenIsoVisitor;
import org.openrewrite.maven.MavenVisitor;
import org.openrewrite.maven.UpgradeDependencyVersion;
import org.openrewrite.maven.tree.*;
import org.openrewrite.semver.LatestPatch;
import org.openrewrite.xml.tree.Xml;

import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

import static java.util.Objects.requireNonNull;

@Value
@EqualsAndHashCode(callSuper = false)
public class DependencyVulnerabilityCheck extends Recipe {
    transient VersionParser versionParser = new VersionParser();
    transient VulnerabilityReport report = new VulnerabilityReport(this);

    @Option(displayName = "Scope",
            description = "Match dependencies with the specified scope",
            valid = {"compile", "test", "runtime", "provided"},
            example = "compile")
    String scope;

    @Option(displayName = "Override managed version",
            description = "This flag can be set to explicitly override a managed dependency's version. The default for this flag is `false`.",
            example = "false",
            required = false)
    @Nullable
    Boolean overrideManagedVersion;

    @Option(displayName = "Add markers",
            description = "Report each vulnerability in search results. If this is off, it is easier to see suggested changes.",
            required = false)
    @Nullable
    Boolean addMarkers;

    @Override
    public String getDisplayName() {
        return "Check for dependency vulnerabilities";
    }

    @Override
    public String getDescription() {
        return "This is a software composition analysis (SCA) tool detects publicly " +
               "disclosed vulnerabilities contained within a projectâ€™s dependencies. It does this by determining " +
               "If found, it will generate a report linking to the associated CVE entries.";
    }

    @Override
    public Validated validate() {
        return super.validate().and(Validated.test("scope", "scope is a valid Maven scope", scope, s -> {
            try {
                Scope.fromName(s);
                return true;
            } catch (Throwable t) {
                return false;
            }
        }));
    }

    @Override
    protected List<SourceFile> visit(List<SourceFile> before, ExecutionContext ctx) {
        Scope aScope = Scope.fromName(scope);
        Map<GroupArtifact, List<Vulnerability>> db = new HashMap<>();
        Map<ResolvedGroupArtifactVersion, Set<MinimumDepthVulnerability>> vulnerabilities = new HashMap<>();

        CsvMapper csvMapper = new CsvMapper();

        try {
            CsvSchema schema = CsvSchema.builder()
                    .addColumn("cve")
                    .addColumn("published")
                    .addColumn("summary")
                    .addColumn("groupArtifact")
                    .addColumn("introducedVersion")
                    .addColumn("fixedVersion")
                    .addColumn("severity")
                    .build();

            MappingIterator<Map<String, String>> vs = csvMapper
                    .readerForMapOf(String.class)
                    .with(schema)
                    .readValues(DependencyVulnerabilityCheck.class.getResourceAsStream("/advisories.csv"));

            ObjectMapper mapper = new ObjectMapper()
                    .registerModule(new JavaTimeModule())
                    .registerModule(new ParameterNamesModule());

            while (vs.hasNextValue()) {
                Vulnerability v = mapper.convertValue(vs.nextValue(), Vulnerability.class);
                String[] ga = v.getGroupArtifact().split(":");
                db.computeIfAbsent(new GroupArtifact(ga[0], ga[1]), g -> new ArrayList<>()).add(v);
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        Map<GroupArtifact, String> mavenFixes = new HashMap<>();

        List<SourceFile> after = ListUtils.map(before, sourceFile -> {
            scanMaven(db, vulnerabilities, aScope).visitNonNull(sourceFile, ctx);
            scanGradleGroovy(db, vulnerabilities, aScope).visitNonNull(sourceFile, ctx);

            SourceFile s = sourceFile;
            s = (SourceFile) reportMaven(vulnerabilities, aScope, mavenFixes).visitNonNull(s, ctx);
            s = (SourceFile) reportGradleGroovy(vulnerabilities, aScope).visitNonNull(s, ctx);

            return s;
        });

        for (Map.Entry<GroupArtifact, String> gav : mavenFixes.entrySet()) {
            after = new UpgradeDependencyVersion(gav.getKey().getGroupId(), gav.getKey().getArtifactId(),
                    gav.getValue(), null, overrideManagedVersion, null).visit(after, ctx);
        }

        for (Map.Entry<ResolvedGroupArtifactVersion, Set<MinimumDepthVulnerability>> vulnerabilitiesByGav : vulnerabilities.entrySet()) {
            for (MinimumDepthVulnerability vDepth : vulnerabilitiesByGav.getValue()) {
                Vulnerability v = vDepth.getVulnerability();
                ResolvedGroupArtifactVersion gav = vulnerabilitiesByGav.getKey();
                report.insertRow(ctx, new VulnerabilityReport.Row(
                        v.getCve(),
                        gav.getGroupId(),
                        gav.getArtifactId(),
                        gav.getVersion(),
                        v.getFixedVersion(),
                        v.getSummary(),
                        v.getSeverity().toString(),
                        vDepth.getMinDepth()
                ));
            }
        }

        return after;
    }

    private MavenVisitor<ExecutionContext> scanMaven(Map<GroupArtifact, List<Vulnerability>> db,
                                                     Map<ResolvedGroupArtifactVersion, Set<MinimumDepthVulnerability>> vulnerabilities,
                                                     Scope aScope) {
        return new MavenIsoVisitor<ExecutionContext>() {
            @Override
            public Xml.Document visitDocument(Xml.Document document, ExecutionContext ctx) {
                List<ResolvedDependency> scopeDependencies = getResolutionResult().getDependencies().get(aScope);
                if (scopeDependencies != null) {
                    for (ResolvedDependency resolvedDependency : scopeDependencies) {
                        analyzeDependency(db, vulnerabilities, resolvedDependency);
                    }
                }
                return super.visitDocument(document, ctx);
            }
        };
    }

    private GroovyVisitor<ExecutionContext> scanGradleGroovy(Map<GroupArtifact, List<Vulnerability>> db,
                                                             Map<ResolvedGroupArtifactVersion, Set<MinimumDepthVulnerability>> vulnerabilities,
                                                             Scope aScope) {
        return new GroovyIsoVisitor<ExecutionContext>() {
            @Override
            public G.CompilationUnit visitCompilationUnit(G.CompilationUnit cu, ExecutionContext ctx) {
                cu.getMarkers().findFirst(GradleProject.class).ifPresent(gradleProject -> {
                    for (GradleDependencyConfiguration configuration : gradleProject.getConfigurations()) {
                        // FIXME limit by scope
                        for (ResolvedDependency resolvedDependency : configuration.getResolved()) {
                            if (!StringUtils.isBlank(resolvedDependency.getVersion())) {
                                analyzeDependency(db, vulnerabilities, resolvedDependency);
                            }
                        }
                    }
                });
                return super.visitCompilationUnit(cu, ctx);
            }
        };
    }

    private void analyzeDependency(Map<GroupArtifact, List<Vulnerability>> db,
                                   Map<ResolvedGroupArtifactVersion, Set<MinimumDepthVulnerability>> vulnerabilities,
                                   ResolvedDependency resolvedDependency) {
        List<Vulnerability> vs = db.get(new GroupArtifact(resolvedDependency.getGroupId(), resolvedDependency.getArtifactId()));
        if (vs != null) {
            Set<MinimumDepthVulnerability> gavVs = null;
            Comparator<Version> vc = new StaticVersionComparator();

            nextVulnerability:
            for (Vulnerability v : vs) {
                boolean isLessThanFixed = StringUtils.isBlank(v.getFixedVersion());
                if (!isLessThanFixed) {
                    if (resolvedDependency.getVersion().endsWith(".RELEASE")) {
                        String versionWithoutRelease = resolvedDependency.getVersion().substring(0,
                                resolvedDependency.getVersion().length() - ".RELEASE".length());
                        if (vc.compare(versionParser.transform(v.getFixedVersion()), versionParser.transform(versionWithoutRelease)) > 0) {
                            isLessThanFixed = true;
                        }
                    } else if (vc.compare(versionParser.transform(v.getFixedVersion()), versionParser.transform(resolvedDependency.getVersion())) > 0) {
                        isLessThanFixed = true;
                    }
                }

                if (isLessThanFixed && vc.compare(versionParser.transform(v.getIntroducedVersion()), versionParser.transform(resolvedDependency.getVersion())) <= 0) {
                    if (gavVs == null) {
                        gavVs = vulnerabilities.computeIfAbsent(resolvedDependency.getGav(), ga -> new TreeSet<>(
                                Comparator.comparing((MinimumDepthVulnerability vDep) -> vDep.getVulnerability().getSeverity()).reversed()
                                        .thenComparing((MinimumDepthVulnerability vDep) -> vDep.getVulnerability().getCve())));
                    }

                    for (MinimumDepthVulnerability vDep : gavVs) {
                        if (vDep.getVulnerability().equals(v)) {
                            vDep.minDepth = Math.min(vDep.minDepth, resolvedDependency.getDepth());
                            continue nextVulnerability;
                        }
                    }

                    gavVs.add(new MinimumDepthVulnerability(resolvedDependency.getDepth(), v));
                }
            }
        }
    }

    private MavenVisitor<ExecutionContext> reportMaven(Map<ResolvedGroupArtifactVersion, Set<MinimumDepthVulnerability>> vulnerabilities,
                                                       Scope aScope,
                                                       Map<GroupArtifact, String> fixes) {
        return new MavenIsoVisitor<ExecutionContext>() {
            @Override
            public Xml.Tag visitTag(Xml.Tag tag, ExecutionContext ctx) {
                if (isDependencyTag()) {
                    ResolvedDependency resolved = findDependency(tag, aScope);
                    if (resolved != null) {
                        for (Map.Entry<ResolvedGroupArtifactVersion, Set<MinimumDepthVulnerability>> vulnerabilitiesByGav : vulnerabilities.entrySet()) {
                            ResolvedGroupArtifactVersion gav = vulnerabilitiesByGav.getKey();
                            ResolvedDependency match = resolved.findDependency(requireNonNull(gav.getGroupId()), gav.getArtifactId());
                            if (match != null) {
                                boolean vulnerable = false;

                                for (MinimumDepthVulnerability vDepth : vulnerabilitiesByGav.getValue()) {
                                    Vulnerability v = vDepth.getVulnerability();
                                    vulnerable = true;

                                    GroupArtifact ga = new GroupArtifact(gav.getGroupId(), gav.getArtifactId());
                                    String fixVersion = fixes.get(ga);
                                    if (!StringUtils.isBlank(v.getFixedVersion()) &&
                                        new LatestPatch(null).isValid(gav.getVersion(), v.getFixedVersion())) {
                                        if (fixVersion == null || new StaticVersionComparator().compare(versionParser.transform(v.getFixedVersion()), versionParser.transform(fixVersion)) > 0) {
                                            fixes.put(ga, v.getFixedVersion());
                                        }
                                    }
                                }

                                if (vulnerable && Boolean.TRUE.equals(addMarkers)) {
                                    return SearchResult.found(tag, "This dependency includes " + gav + " which has the following vulnerabilities:\n" +
                                                                   vulnerabilitiesByGav.getValue().stream()
                                                                           .map(vDepth -> {
                                                                               Vulnerability v = vDepth.getVulnerability();
                                                                               return v.getCve() + " (" + v.getSeverity() + " severity" +
                                                                                      (StringUtils.isBlank(v.getFixedVersion()) ? "" : ", fixed in " + v.getFixedVersion()) +
                                                                                      ") - " + v.getSummary();
                                                                           })
                                                                           .collect(Collectors.joining("\n")));
                                }
                            }
                        }
                    }
                }
                return super.visitTag(tag, ctx);
            }
        };
    }

    private GroovyVisitor<ExecutionContext> reportGradleGroovy(Map<ResolvedGroupArtifactVersion, Set<MinimumDepthVulnerability>> vulnerabilities, Scope aScope) {
        return new GroovyIsoVisitor<ExecutionContext>() {
            @Override
            public G.CompilationUnit visitCompilationUnit(G.CompilationUnit cu, ExecutionContext ctx) {
                G.CompilationUnit c = cu;
                for (Map.Entry<ResolvedGroupArtifactVersion, Set<MinimumDepthVulnerability>> vulnerabilitiesByGav : vulnerabilities.entrySet()) {
                    ResolvedGroupArtifactVersion gav = vulnerabilitiesByGav.getKey();
                    c = SearchResult.found(c, "This project has the following vulnerabilities:\n" +
                                                   vulnerabilitiesByGav.getValue().stream()
                                                           .map(vDepth -> {
                                                               Vulnerability v = vDepth.getVulnerability();
                                                               return "Dependency " + gav + " has " + v.getCve() + " (" + v.getSeverity() + " severity" +
                                                                      (StringUtils.isBlank(v.getFixedVersion()) ? "" : ", fixed in " + v.getFixedVersion()) +
                                                                      ") - " + v.getSummary();
                                                           })
                                                           .collect(Collectors.joining("\n")));
                }
                return c;
            }
        };
    }

    @Value
    private static class MinimumDepthVulnerability {
        @NonFinal
        int minDepth;

        Vulnerability vulnerability;
    }
}
